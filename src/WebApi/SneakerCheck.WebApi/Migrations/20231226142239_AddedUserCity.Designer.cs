// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SneakerCheck.WebApi.Data;

#nullable disable

namespace SneakerCheck.WebApi.Migrations
{
    [DbContext(typeof(SneakerCheckDbContext))]
    [Migration("20231226142239_AddedUserCity")]
    partial class AddedUserCity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("SneakerCheck.WebApi.Models.ImageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("bytes");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("format");

                    b.HasKey("Id")
                        .HasName("pk_image_models");

                    b.ToTable("image_models", (string)null);
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.Instruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<int>("Dislikes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dislikes");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("likes");

                    b.Property<Guid>("PreviewImageId")
                        .HasColumnType("TEXT")
                        .HasColumnName("preview_image_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("product_name");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("TEXT")
                        .HasColumnName("shop_id");

                    b.HasKey("Id")
                        .HasName("pk_instructions");

                    b.HasIndex("PreviewImageId")
                        .IsUnique()
                        .HasDatabaseName("ix_instructions_preview_image_id");

                    b.HasIndex("ProductName")
                        .HasDatabaseName("ix_instructions_product_name");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_instructions_shop_id");

                    b.ToTable("instructions", (string)null);
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.InstructionContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<Guid>("FakeImageId")
                        .HasColumnType("TEXT")
                        .HasColumnName("fake_image_id");

                    b.Property<string>("ImageDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("image_description");

                    b.Property<Guid?>("InstructionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("instruction_id");

                    b.Property<Guid>("OriginalImageId")
                        .HasColumnType("TEXT")
                        .HasColumnName("original_image_id");

                    b.HasKey("Id")
                        .HasName("pk_instruction_content");

                    b.HasIndex("FakeImageId")
                        .IsUnique()
                        .HasDatabaseName("ix_instruction_content_fake_image_id");

                    b.HasIndex("InstructionId")
                        .HasDatabaseName("ix_instruction_content_instruction_id");

                    b.HasIndex("OriginalImageId")
                        .IsUnique()
                        .HasDatabaseName("ix_instruction_content_original_image_id");

                    b.ToTable("instruction_content", (string)null);
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<Guid>("IconId")
                        .HasColumnType("TEXT")
                        .HasColumnName("icon_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<double>("Rate")
                        .HasColumnType("REAL")
                        .HasColumnName("rate");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("seller_id");

                    b.HasKey("Id")
                        .HasName("pk_shops");

                    b.HasIndex("IconId")
                        .IsUnique()
                        .HasDatabaseName("ix_shops_icon_id");

                    b.HasIndex("SellerId")
                        .HasDatabaseName("ix_shops_seller_id");

                    b.ToTable("shops", (string)null);
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.ShopUrl", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("TEXT")
                        .HasColumnName("shop_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("url");

                    b.HasKey("Name")
                        .HasName("pk_shop_url");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_shop_url_shop_id");

                    b.ToTable("shop_url", (string)null);
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("google_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_user_models");

                    b.HasIndex("GoogleId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_models_google_id");

                    b.ToTable("user_models", (string)null);
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.Instruction", b =>
                {
                    b.HasOne("SneakerCheck.WebApi.Models.ImageModel", null)
                        .WithOne()
                        .HasForeignKey("SneakerCheck.WebApi.Models.Instruction", "PreviewImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instructions_image_models_preview_image_id");

                    b.HasOne("SneakerCheck.WebApi.Models.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instructions_shops_shop_id");
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.InstructionContent", b =>
                {
                    b.HasOne("SneakerCheck.WebApi.Models.ImageModel", null)
                        .WithOne()
                        .HasForeignKey("SneakerCheck.WebApi.Models.InstructionContent", "FakeImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instruction_content_image_models_fake_image_id");

                    b.HasOne("SneakerCheck.WebApi.Models.Instruction", null)
                        .WithMany("Content")
                        .HasForeignKey("InstructionId")
                        .HasConstraintName("fk_instruction_content_instructions_instruction_id");

                    b.HasOne("SneakerCheck.WebApi.Models.ImageModel", null)
                        .WithOne()
                        .HasForeignKey("SneakerCheck.WebApi.Models.InstructionContent", "OriginalImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instruction_content_image_models_original_image_id");
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.Shop", b =>
                {
                    b.HasOne("SneakerCheck.WebApi.Models.ImageModel", null)
                        .WithOne()
                        .HasForeignKey("SneakerCheck.WebApi.Models.Shop", "IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shops_image_models_icon_id");

                    b.HasOne("SneakerCheck.WebApi.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shops_user_models_seller_id");
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.ShopUrl", b =>
                {
                    b.HasOne("SneakerCheck.WebApi.Models.Shop", null)
                        .WithMany("ShopUrls")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("fk_shop_url_shops_shop_id");
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.Instruction", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("SneakerCheck.WebApi.Models.Shop", b =>
                {
                    b.Navigation("ShopUrls");
                });
#pragma warning restore 612, 618
        }
    }
}
